---
description: 
globs: 
alwaysApply: true
---
### Общий промпт для AI-редактора (Cursor)

**Проект:** Автоматизированный генератор выкроек для питомцев.

**Роли:**
* **Владелец проекта (Пользователь):** Выдает задачи, предоставляет файлы и тестирует результат.
* **AI-ассистент по коду (Ты, Cursor):** Пишешь, исправляешь и анализируешь код по запросу.
* **Технический руководитель (Партнер-программист, Gemini):** Осуществляет общее руководство, помогает с архитектурой и сложными проблемами.

**Основная цель проекта:**
Создать веб-сервис, где конечный пользователь может выбрать выкройку, ввести мерки своего питомца, произвести оплату и получить в результате готовый к печати PDF-файл с выкройкой, масштабированной под его размеры.

---
### **Архитектура и стек технологий**

* **Backend:** PHP, фреймворк Laravel (версия 10.x).
* **Frontend:** Шаблоны Laravel Blade с частичным использованием Alpine.js для интерактивности в админ-панели.
* **База данных:** MySQL 8.0.
* **Окружение:** Проект полностью работает в Docker-окружении, управляемом через `docker-compose.yml`. Основные сервисы: `app` (PHP-FPM 8.2), `nginx`, `db` (MySQL).
* **Ключевой компонент (Движок):** Программное обеспечение для генерации выкроек **Valentina** (форк Seamly). Мы **не используем готовый бинарный файл**. Мы компилируем его из исходного кода прямо в Docker-образе на этапе сборки.

---
### **Текущий статус и выполненные задачи (На 14.06.2025)**

1.  **Настроено Docker-окружение:** Созданы и отлажены все необходимые файлы (`docker-compose.yml`, `Dockerfile`, конфигурация `nginx`). Все сервисы успешно запускаются.
2.  **Скомпилирован движок:** В `Dockerfile` реализована многоэтапная сборка. На первом этапе (`builder`) на основе `ubuntu:20.04` из репозитория GitLab клонируются исходники **Valentina**, и компилируется версия **v0.7.52**. На втором, финальном, этапе скомпилированный исполняемый файл `valentina` и необходимые ему библиотеки (`libqmuparser.so`, `libvpropertyexplorer.so`) копируются в рабочий образ `php:8.2-fpm`.
3.  **Проверка движка:** Мы подтвердили, что скомпилированный движок (`/usr/local/bin/valentina`) успешно запускается внутри контейнера `app` в безэкранном режиме (`-platform offscreen`) и отвечает на команду `--help`.
4.  **Настроена база данных:** Контейнер `db` работает. Laravel-приложение (`app`) успешно подключается к нему. Все миграции выполнены, таблицы в базе данных созданы. Данные со старой системы (MAMP) перенесены.
5.  **Работает админ-панель:** Восстановлен доступ к админ-панели. Реализована новая, упрощенная логика хранения параметров выкроек:
    * Вместо отдельной таблицы `pattern_parameters` используется одна **JSON-колонка `parameters`** в основной таблице `vfiles`.
    * В модель `Vfile.php` добавлена логика, которая **автоматически** заполняет эту колонку стандартным набором из 8 параметров при создании новой выкройки.
    * Интерфейс в админ-панели был исправлен для работы с этой новой структурой.

---
### **Непосредственная задача: Реализация генерации PDF**

Мы находимся на финальном этапе. Окружение полностью готово. Теперь нам нужно реализовать основную бизнес-логику.

**Цель:** Заставить PHP-код вызывать наш скомпилированный движок и генерировать PDF-файл.

**Конкретные шаги:**

1.  **Проанализировать `VfileController.php` (или похожий):** Найти метод, отвечающий за финальный этап генерации выкройки для пользователя (вероятно, `generate()` или похожий).
2.  **Проверить подготовку данных:** Убедиться, что код в методе `generateCustomPDF` (модель `Vfile`) правильно создает временный файл с мерками (`.vit`) на основе ввода пользователя.
3.  **Сформировать команду:** На основе справки (`--help`) от движка, которую мы получили, сформировать правильную команду для его вызова. Примерная структура:
    ```bash
    /usr/local/bin/valentina -platform offscreen --format 1 --basename <имя_файла> --mfile <путь_к_файлу.vit> --destination <папка_для_pdf> <путь_к_файлу.val>
    ```
4.  **Выполнить команду:** Реализовать в PHP-методе `generatePDF` (модель `Vfile`) вызов этой команды через `shell_exec()`.
5.  **Обработать результат:** Проверить, что PDF-файл был успешно создан в указанной папке. В случае успеха — вернуть пользователю ссылку на скачивание или сам файл. В случае ошибки — перехватить и проанализировать вывод `shell_exec`.
6.  **Провести сквозное тестирование:** Пройти весь путь пользователя: открыть страницу выкройки, ввести мерки, нажать кнопку генерации и получить на выходе PDF-файл.

---
### **Общие инструкции для тебя, Cursor**

* Пиши код на PHP в рамках фреймворка Laravel 10.
* Всегда уточняй полный путь к файлу, который нужно изменить.
* Комментируй сложные или неочевидные участки кода.
* Задавай уточняющие вопросы, если требования не ясны.
* Предлагай альтернативные или более эффективные решения, если считаешь это нужным.
