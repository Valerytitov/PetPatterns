services:
  # Сервис для Laravel приложения (PHP-FPM)
  app:
    platform: linux/arm64
    build:
      context: .
      dockerfile: Dockerfile
    container_name: petpatterns-app
    # ВАЖНО: Эта команда исправляет права доступа при каждом запуске контейнера.
    # Это решает ошибку "Failed to lock file".
    command: sh -c "chmod -R 777 /var/www/storage /var/www/bootstrap/cache && php-fpm"
    restart: unless-stopped
    working_dir: /var/www
    volumes:
      - ./:/var/www
    networks:
      - petpatterns-network
    dns:
      - 8.8.8.8
      - 8.8.4.4

  # Сервис для веб-сервера Nginx
  nginx:
    image: nginx:1.19-alpine
    container_name: petpatterns-nginx
    restart: unless-stopped
    ports:
      - "8890:80" # Пробрасываем порт 8890 с вашего компьютера на порт 80 контейнера
    volumes:
      - ./:/var/www
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./storage/app/public:/var/www/public/storage
    depends_on:
      - app
    networks:
      - petpatterns-network

  # Сервис для базы данных MySQL
  db:
    image: mysql:8.0
    container_name: petpatterns-db
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: ${DB_DATABASE:-petpatterns_db}
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD:-secret}
      MYSQL_PASSWORD: ${DB_PASSWORD:-secret}
      MYSQL_USER: ${DB_USERNAME:-user}
    volumes:
      - ./docker/db_data:/var/lib/mysql
    ports:
      - "3307:3306" # Пробрасываем порт 3307, чтобы не конфликтовать с локальным MySQL от MAMP
    networks:
      - petpatterns-network

  worker:
    # Используем тот же самый образ, что и для основного приложения
    image: petpatterns-app 
    container_name: petpatterns-worker-container
    
    # Политика перезапуска: всегда перезапускать, если контейнер упал
    restart: unless-stopped
    
    # Команда, которую выполняет этот контейнер: запуск обработчика очереди
    # --sleep=3: ждать 3 секунды перед проверкой новой задачи, чтобы не нагружать процессор
    # --tries=3: пытаться выполнить "упавшую" задачу 3 раза
    command: php artisan queue:work --sleep=3 --tries=3
    
    # Пробрасываем код проекта, как и в основном app-контейнере
    volumes:
      - ./:/var/www
      
    # Подключаем к той же сети
    networks:
      - petpatterns-network # У вас может быть другое имя сети
      
    # Запускаем после того, как будут готовы app и db
    depends_on:
      - app
      - db

networks:
  petpatterns-network:
    driver: bridge
