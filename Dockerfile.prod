# ЭТАП 1: Composer для PHP-зависимостей (production)
FROM composer:2 AS composer
WORKDIR /app
COPY composer.json composer.lock ./
RUN composer install --no-dev --prefer-dist --optimize-autoloader --no-scripts

# ЭТАП 2: Финальный образ (production)
FROM php:8.2-fpm

RUN apt-get update \
    && apt-get upgrade -y \
    && apt-get install -y --no-install-recommends \
        libqt5core5a \
        libqt5gui5 \
        libqt5widgets5 \
        libqt5xml5 \
        libqt5svg5 \
        libqt5printsupport5 \
        libqt5xmlpatterns5 \
        libqt5concurrent5 \
        poppler-utils \
        pdfposter \
        unzip \
        libonig-dev \
        libzip-dev \
        libfreetype6-dev \
        libjpeg62-turbo-dev \
        libpng-dev \
        xvfb \
        xauth \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

ARG VAL_ARCH=amd64
ENV VAL_ARCH=${VAL_ARCH}

# Копируем готовый бинарник и библиотеки Valentina из bin/
COPY bin/valentina-${VAL_ARCH} /usr/local/bin/valentina
COPY bin/libvpropertyexplorer-${VAL_ARCH}.so /usr/local/lib/libvpropertyexplorer.so
COPY bin/libqmuparser-${VAL_ARCH}.so /usr/local/lib/libqmuparser.so
RUN ldconfig && chmod +x /usr/local/bin/valentina

ENV XDG_RUNTIME_DIR=/tmp/runtime-www-data
RUN mkdir -p /tmp/runtime-www-data && chmod 700 /tmp/runtime-www-data && chown www-data:www-data /tmp/runtime-www-data

RUN docker-php-ext-configure gd --with-freetype --with-jpeg \
    && docker-php-ext-install -j$(nproc) gd pdo_mysql mbstring zip exif pcntl

WORKDIR /var/www

COPY . .
COPY --from=composer /app/vendor ./vendor

RUN mkdir -p bootstrap/cache \
    && chown -R www-data:www-data storage bootstrap/cache

# Production-оптимизация Laravel
RUN php artisan config:cache \
    && php artisan route:cache \
    && php artisan view:cache

USER www-data 